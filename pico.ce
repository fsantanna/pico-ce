type Bool {
    False: ()
    True:  ()
}

func bool: Int -> Bool {
    return _(arg ? (Bool){True} : (Bool){False})
}

func not: Bool -> Bool {
    if arg {
        return False
    } else {
        return True
    }
}

func check: Bool -> () {
    if not arg {
        call _assert 0
    }
    return ()
}

-------------------------------------------------------------------------------

type Events {
    ANY:             ()
    KEYDOWN:         ()
    MOUSEBUTTONDOWN: ()
}

type Event_ {
    Any:     ()
    KeyDown: Int
    MouseButtonDown: (Int,(Int,Int))
}

type IO_Pico {
    -- INPUT

    Delay:              Int
    Event:              (Events,\Event_)
    Event_Timeout:      (Events,\Event_,Int)

    -- OUTPUT

    Clear:              ()

    Draw_Pixel:         (Int,Int)
    Draw_Text:          ((Int,Int),_{char*})

    Get_Size:           \((Int,Int),(Int,Int))

    Set_Color_Clear:    (Int,Int,Int,Int)
    Set_Color_Draw:     (Int,Int,Int,Int)
    Set_Cursor:         (Int,Int)
    Set_Font:           (_{char*},Int)
    Set_Size:           ((Int,Int),(Int,Int))
    Set_Title:          _(char*)

    Write:              _(char*)
    WriteLn:            _(char*)
}

func output_pico: IO_Pico -> () {
    native _{
        pico_output(*(Pico_IO*)&arg);
    }
    return ()
}

func input_pico: IO_Pico -> Bool {
    if arg.Delay? {
        return bool _(pico_input(*(Pico_IO*)&arg))
    }

    native _{
        SDL_Event e;
    }

    func tosdl: Events -> Int {
        if arg.ANY? {
            return _SDL_ANY
        }
        if arg.KEYDOWN? {
            return _SDL_KEYDOWN
        }
        if arg.MOUSEBUTTONDOWN? {
            return _SDL_MOUSEBUTTONDOWN
        }
        call _assert 0
    }

    func toce: \Event_ -> () {
        if bool _(e.type == SDL_KEYDOWN) {
            set arg\ = KeyDown _(e.key.keysym.sym)
        }
        if bool _(e.type == SDL_MOUSEBUTTONDOWN) {
            var bt: Int = _(e.button.button)
            var x:  Int = _(e.button.x)
            var y:  Int = _(e.button.y)
            set arg\ = MouseButtonDown (bt, (x,y))
        }
        return ()
    }

    if arg.Event? {
        var sdl: Int = tosdl arg.Event!.1
        call _pico_input _{(Pico_IO) {PICO_EVENT,.Event={sdl,&e}}}
        call toce (arg.Event!.2)
        return True
    }

    if arg.Event_Timeout? {
        var sdl: Int = tosdl arg.Event_Timeout!.1
        var ret: Int = _pico_input _{(Pico_IO) {PICO_EVENT_TIMEOUT,.Event_Timeout={sdl,arg._Event_Timeout._3,&e}}}
        if bool ret {
            call toce (arg.Event_Timeout!.2)
            return True
        } else {
            return False
        }
    }

    call _assert 0
    return True
}

call _pico_init()
