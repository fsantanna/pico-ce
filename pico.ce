type Bool {
    False: ()
    True:  ()
}

func bool: Int -> Bool {
    return _(arg ? (Bool){True} : (Bool){False})
}

func not: Bool -> Bool {
    if arg {
        return False
    } else {
        return True
    }
}

func check: Bool -> () {
    if not arg {
        call _assert 0
    }
    return ()
}

-------------------------------------------------------------------------------

type Color_ {
    Color_Clear: (Int,Int,Int,Int)
    Color_Draw:  (Int,Int,Int,Int)
}

type Set_ {
    Color: Color_
    Size:  (Int,Int,Int,Int)
    Title: _(char*)
}

type Draw_ {
    Pixel: (Int,Int)
}

type Output {
    Clear:  ()
    Draw:   Draw_
    Set:    Set_
    Update: ()
}

type Event_ {
    Any:     ()
    KeyDown: Int
}

type Input {
    Delay: Int
    Event: (&Event_,Int)
}

func output: Output -> () {
    native _{
        pico_output(*(Pico_Output*)&arg);
    }
    return ()
}

func input: Input -> Bool {
    if arg.Delay? {
        return bool _(pico_input(*(Pico_Input*)&arg))
    }
    call check arg.Event?

    native _(
        SDL_Event e;
        Pico_Input inp = {PICO_EVENT,.Event={0,arg._Event._2,&e}};
    )

    if arg.Event!.1.KeyDown? {
        native _{ inp.Event.type = SDL_KEYDOWN; }
    }

    if not bool _pico_input _inp {
        return False
    }

    if arg.Event!.1.KeyDown? {
        native _{ arg._Event._1->_KeyDown = 10 }
    }
    return True
}

call _pico_init()
