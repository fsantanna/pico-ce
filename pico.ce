type Bool {
    False: ()
    True:  ()
}

func bool: Int -> Bool {
    return _(arg ? (Bool){True} : (Bool){False})
}

func not: Bool -> Bool {
    if arg {
        return False
    } else {
        return True
    }
}

func check: Bool -> () {
    if not arg {
        call _assert 0
    }
    return ()
}

-------------------------------------------------------------------------------

type Color_ {
    Color_Clear: (Int,Int,Int,Int)
    Color_Draw:  (Int,Int,Int,Int)
}

type Set_ {
    Color: Color_
    Font:  (_{char*},Int)
    Size:  ((Int,Int),(Int,Int))
    Title: _(char*)
}

type Draw_ {
    Pixel: (Int,Int)
    Text:  ((Int,Int),_{char*})
}

type Output {
    Clear:  ()
    Draw:   Draw_
    Set:    Set_
}

type Event_ {
    Any:     ()
    KeyDown: Int
    MouseButtonDown: (Int,(Int,Int))
}

type Input {
    Delay: Int
    Event: &Event_
    Event_Timeout: (&Event_,Int)
}

func output: Output -> () {
    native _{
        pico_output(*(Pico_Output*)&arg);
    }
    return ()
}

func input: Input -> Bool {
    if arg.Delay? {
        return bool _(pico_input(*(Pico_Input*)&arg))
    }

    native _{
            SDL_Event e;
    }

    if arg.Event? {
        native _(
            Pico_Input inp = {PICO_EVENT,.Event={0,&e}};
        )
        if arg.Event!.KeyDown? {
            native _{ inp.Event.type = SDL_KEYDOWN; }
        }
        if arg.Event!.MouseButtonDown? {
            native _{ inp.Event.type = SDL_MOUSEBUTTONDOWN; }
        }
        call _pico_input _inp
        if arg.Event!.KeyDown? {
            --set arg.Event!.KeyDown! = _(e.key.keysym.sym)
            native _{ arg._Event->_KeyDown = e.key.keysym.sym; }
        }
        if arg.Event!.MouseButtonDown? {
            native _{ arg._Event->_MouseButtonDown._1    = e.button.button; }
            native _{ arg._Event->_MouseButtonDown._2._1 = e.button.x; }
            native _{ arg._Event->_MouseButtonDown._2._2 = e.button.y; }
        }
        return True
    } else {
        call check arg.Event_Timeout?
        native _(
            Pico_Input inp = {PICO_EVENT_TIMEOUT,.Event_Timeout={0,arg._Event_Timeout._2,&e}};
        )
        if arg.Event_Timeout!.1.KeyDown? {
            native _{ inp.Event_Timeout.type = SDL_KEYDOWN; }
        }
        if not bool _pico_input _inp {
            return False
        }
        if arg.Event_Timeout!.1.KeyDown? {
            native _{ arg._Event_Timeout._1->_KeyDown = e.key.keysym.sym; }
        }
        return True
    }
}

call _pico_init()
